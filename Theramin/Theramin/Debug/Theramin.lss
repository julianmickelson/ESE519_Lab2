
Theramin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b3  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000260  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_10>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define check(reg,bit)		(bool)(reg & (1<<(bit)))


int main(void)
{
	sei();
  80:	78 94       	sei
	
	set(DDRB,5); // output b5
  82:	25 9a       	sbi	0x04, 5	; 4
	set(DDRB,1);
  84:	21 9a       	sbi	0x04, 1	; 4
	
	clear(TCCR1B,CS12); // clock prescaler /1
  86:	e1 e8       	ldi	r30, 0x81	; 129
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8b 7f       	andi	r24, 0xFB	; 251
  8e:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
  90:	80 81       	ld	r24, Z
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	80 83       	st	Z, r24
	set(TCCR1B,CS10);
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	
	OCR1A = 18181;
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	97 e4       	ldi	r25, 0x47	; 71
  a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	set(TCCR1B,WGM13);
  a8:	80 81       	ld	r24, Z
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
  ae:	80 81       	ld	r24, Z
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
  b4:	a0 e8       	ldi	r26, 0x80	; 128
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	8c 91       	ld	r24, X
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8c 93       	st	X, r24
	set(TCCR1A,WGM10); // up to OCR1A, mode 15
  be:	8c 91       	ld	r24, X
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8c 93       	st	X, r24
	
	set(TCCR1B,ICES1); // input capture ICP1 rising edge
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	// this will set ICF1
	
	set(TIMSK1,ICIE1); // timer1 input capture interrupt enable
  ca:	ef e6       	ldi	r30, 0x6F	; 111
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	80 83       	st	Z, r24
	// corresponding interrupt vector is executed when the ICF1 flag in TIFR1 is set
	set(TIMSK1,OCIE1A); // enable TIMER1_COMPA
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x5a>

000000dc <__vector_11>:
    while (1) 
    {
    }
}

ISR(TIMER1_COMPA_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	toggle(PORTB,1);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	89 27       	eor	r24, r25
  f0:	85 b9       	out	0x05, r24	; 5
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_10>:

ISR(TIMER1_CAPT_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	// ICF1 will be cleared automatically
	toggle(PORTB,5); // 
 112:	95 b1       	in	r25, 0x05	; 5
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	89 27       	eor	r24, r25
 118:	85 b9       	out	0x05, r24	; 5
	toggle(TCCR1B,ICES1); 
 11a:	e1 e8       	ldi	r30, 0x81	; 129
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	80 e4       	ldi	r24, 0x40	; 64
 122:	89 27       	eor	r24, r25
 124:	80 83       	st	Z, r24
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>

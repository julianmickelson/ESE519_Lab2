
Myles_Version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000a72  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800154  00800154  00000b5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ef  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000751  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000506  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000021a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000418  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000320  00000000  00000000  00002708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 35       	cpi	r26, 0x54	; 84
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e5       	ldi	r26, 0x54	; 84
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 00 01 	call	0x200	; 0x200 <main>
  9e:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
		uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
	UDR0 = c;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <uart_getchar+0x4>
	return UDR0;
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
  fc:	ec e5       	ldi	r30, 0x5C	; 92
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	93 83       	std	Z+3, r25	; 0x03
 106:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <pulse>:
    }
}

void pulse(void) {
		
	clear(TCCR1B,CS12);
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	80 83       	st	Z, r24
	clear(TCCR1B,CS11);
 11c:	80 81       	ld	r24, Z
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	80 83       	st	Z, r24
	set(TCCR1B,CS10);	// Timer 1 prescaler /1
 122:	80 81       	ld	r24, Z
 124:	81 60       	ori	r24, 0x01	; 1
 126:	80 83       	st	Z, r24
		
	set(TCCR1B,WGM13);
 128:	80 81       	ld	r24, Z
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
 12e:	80 81       	ld	r24, Z
 130:	88 60       	ori	r24, 0x08	; 8
 132:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
 134:	e0 e8       	ldi	r30, 0x80	; 128
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
	set(TCCR1A,WGM10); // up to OCR1A (Fast PWM Mode 15)
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24

	set(TCCR1A,COM1B1);
 144:	80 81       	ld	r24, Z
 146:	80 62       	ori	r24, 0x20	; 32
 148:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0); // toggle OC1B (B2) on compare match
 14a:	80 81       	ld	r24, Z
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	80 83       	st	Z, r24

	OCR1A = 65536; // 160 ticks for 10 us at 16MHz
 150:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 154:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 160;
 158:	80 ea       	ldi	r24, 0xA0	; 160
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 160:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 164:	08 95       	ret

00000166 <adcsetup>:
}


void adcsetup (void) {

	clear(ADMUX,REFS1);
 166:	ac e7       	ldi	r26, 0x7C	; 124
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	8c 91       	ld	r24, X
 16c:	8f 77       	andi	r24, 0x7F	; 127
 16e:	8c 93       	st	X, r24
	set(ADMUX,REFS0);	// use AVcc as reference voltage; use ext capacitor
 170:	8c 91       	ld	r24, X
 172:	80 64       	ori	r24, 0x40	; 64
 174:	8c 93       	st	X, r24

	set(ADCSRA,ADPS2);
 176:	ea e7       	ldi	r30, 0x7A	; 122
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1);
 180:	80 81       	ld	r24, Z
 182:	82 60       	ori	r24, 0x02	; 2
 184:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0);  // prescaler /128 = 125kHz
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24

	clear(ADMUX,MUX3);
 18c:	8c 91       	ld	r24, X
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	8c 93       	st	X, r24
	clear(ADMUX,MUX2);
 192:	8c 91       	ld	r24, X
 194:	8b 7f       	andi	r24, 0xFB	; 251
 196:	8c 93       	st	X, r24
	clear(ADMUX,MUX1);
 198:	8c 91       	ld	r24, X
 19a:	8d 7f       	andi	r24, 0xFD	; 253
 19c:	8c 93       	st	X, r24
	clear(ADMUX,MUX0);  // channel selection, ADC0
 19e:	8c 91       	ld	r24, X
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	8c 93       	st	X, r24
	
	set(ADCSRA,ADATE);  // en/dis-able auto trigger
 1a4:	80 81       	ld	r24, Z
 1a6:	80 62       	ori	r24, 0x20	; 32
 1a8:	80 83       	st	Z, r24
	set(ADCSRA,ADIE);   // enable adc interrupt
 1aa:	80 81       	ld	r24, Z
 1ac:	88 60       	ori	r24, 0x08	; 8
 1ae:	80 83       	st	Z, r24
	clear(DIDR0,ADC0D); // disable digital input for ADC0
 1b0:	ae e7       	ldi	r26, 0x7E	; 126
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	8c 91       	ld	r24, X
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	8c 93       	st	X, r24

	set(ADCSRA,ADEN);   // ADC system enable
 1ba:	80 81       	ld	r24, Z
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	80 83       	st	Z, r24
	set(ADCSRA,ADSC);   // start conversion // will need to set every time if not free running
 1c0:	80 81       	ld	r24, Z
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <timer0setup>:
}

void timer0setup(void){

	set(DDRB,7); // set up output pin for timer0
 1c8:	27 9a       	sbi	0x04, 7	; 4

	clear(TCCR0B,WGM02);
 1ca:	85 b5       	in	r24, 0x25	; 37
 1cc:	87 7f       	andi	r24, 0xF7	; 247
 1ce:	85 bd       	out	0x25, r24	; 37
	set(TCCR0A,WGM01);
 1d0:	84 b5       	in	r24, 0x24	; 36
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	84 bd       	out	0x24, r24	; 36
	clear(TCCR0A,WGM00); // mode 2, CTC @ OCRA [pg106]
 1d6:	84 b5       	in	r24, 0x24	; 36
 1d8:	8e 7f       	andi	r24, 0xFE	; 254
 1da:	84 bd       	out	0x24, r24	; 36

	clear(TCCR0A,COM0A1);
 1dc:	84 b5       	in	r24, 0x24	; 36
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	84 bd       	out	0x24, r24	; 36
	set(TCCR0A,COM0A0); // toggle OC0A on compare match [pg104]
 1e2:	84 b5       	in	r24, 0x24	; 36
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	84 bd       	out	0x24, r24	; 36

	OCR0A = 125;
 1e8:	8d e7       	ldi	r24, 0x7D	; 125
 1ea:	87 bd       	out	0x27, r24	; 39

	clear(TCCR0B,CS02);
 1ec:	85 b5       	in	r24, 0x25	; 37
 1ee:	8b 7f       	andi	r24, 0xFB	; 251
 1f0:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS01);
 1f2:	85 b5       	in	r24, 0x25	; 37
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00); // prescaler /64 = 250kHz
 1f8:	85 b5       	in	r24, 0x25	; 37
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	85 bd       	out	0x25, r24	; 37
 1fe:	08 95       	ret

00000200 <main>:
void pulse(void);
//void DAC(int);

int main(void)
{
	sei(); // enable interrupts
 200:	78 94       	sei
	clockdivide(0);
 202:	e1 e6       	ldi	r30, 0x61	; 97
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	80 83       	st	Z, r24
 20a:	10 82       	st	Z, r1
	uart_init(); // serial comm
 20c:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_init>
	
	adcsetup();
 210:	0e 94 b3 00 	call	0x166	; 0x166 <adcsetup>
	timer0setup();
 214:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <timer0setup>

	clear(DDRB,ECHO); // clear for input capture
 218:	20 98       	cbi	0x04, 0	; 4
	set(DDRB,TRIG);   // set output for pulse, timer1
 21a:	22 9a       	sbi	0x04, 2	; 4
	
	set(PORTB,TRIG); // set output pulse to high
 21c:	2a 9a       	sbi	0x05, 2	; 5
	
	pulse();
 21e:	0e 94 89 00 	call	0x112	; 0x112 <pulse>
	
	set(TCCR1B,ICES1); // input capture ICP1 rising edge, ICP1 multiplexed on B1
 222:	e1 e8       	ldi	r30, 0x81	; 129
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24
	// this will set ICF1 flag
	
	set(TIMSK1,ICIE1); // timer1 input capture interrupt enable
 22c:	ef e6       	ldi	r30, 0x6F	; 111
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 62       	ori	r24, 0x20	; 32
 234:	80 83       	st	Z, r24
	// corresponding interrupt vector is executed when the ICF1 flag in TIFR1 is set

    while (1) 
    {
		if (captFlag) {
			printf("%s","risetime: ");
 236:	0f 2e       	mov	r0, r31
 238:	fc e1       	ldi	r31, 0x1C	; 28
 23a:	af 2e       	mov	r10, r31
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	bf 2e       	mov	r11, r31
 240:	f0 2d       	mov	r31, r0
 242:	07 e2       	ldi	r16, 0x27	; 39
 244:	11 e0       	ldi	r17, 0x01	; 1
			printf("%u", risetime);
 246:	ca e2       	ldi	r28, 0x2A	; 42
 248:	d1 e0       	ldi	r29, 0x01	; 1
			printf("\n");
					
			printf("%s", "falltime: ");
 24a:	0f 2e       	mov	r0, r31
 24c:	fd e2       	ldi	r31, 0x2D	; 45
 24e:	cf 2e       	mov	r12, r31
 250:	f1 e0       	ldi	r31, 0x01	; 1
 252:	df 2e       	mov	r13, r31
 254:	f0 2d       	mov	r31, r0
			printf("%u", falltime);
			printf("\n");

			printf("%s","difference: ");
 256:	0f 2e       	mov	r0, r31
 258:	f8 e3       	ldi	r31, 0x38	; 56
 25a:	ef 2e       	mov	r14, r31
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	ff 2e       	mov	r15, r31
 260:	f0 2d       	mov	r31, r0
			
			captFlag = 0;
		}
		
		if (ADCFlag == 1000) {
			printf("%s","Light Sensor: ");
 262:	0f 2e       	mov	r0, r31
 264:	f5 e4       	ldi	r31, 0x45	; 69
 266:	8f 2e       	mov	r8, r31
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	9f 2e       	mov	r9, r31
 26c:	f0 2d       	mov	r31, r0
			printf("%u",ADC);
 26e:	0f 2e       	mov	r0, r31
 270:	f8 e7       	ldi	r31, 0x78	; 120
 272:	6f 2e       	mov	r6, r31
 274:	71 2c       	mov	r7, r1
 276:	f0 2d       	mov	r31, r0
	set(TIMSK1,ICIE1); // timer1 input capture interrupt enable
	// corresponding interrupt vector is executed when the ICF1 flag in TIFR1 is set

    while (1) 
    {
		if (captFlag) {
 278:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <captFlag>
 27c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <captFlag+0x1>
 280:	89 2b       	or	r24, r25
 282:	09 f4       	brne	.+2      	; 0x286 <main+0x86>
 284:	4e c0       	rjmp	.+156    	; 0x322 <main+0x122>
			printf("%s","risetime: ");
 286:	bf 92       	push	r11
 288:	af 92       	push	r10
 28a:	1f 93       	push	r17
 28c:	0f 93       	push	r16
 28e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("%u", risetime);
 292:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <risetime>
 296:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <risetime+0x1>
 29a:	9f 93       	push	r25
 29c:	8f 93       	push	r24
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("\n");
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 68 02 	call	0x4d0	; 0x4d0 <putchar>
					
			printf("%s", "falltime: ");
 2ae:	df 92       	push	r13
 2b0:	cf 92       	push	r12
 2b2:	1f 93       	push	r17
 2b4:	0f 93       	push	r16
 2b6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("%u", falltime);
 2ba:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <falltime>
 2be:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <falltime+0x1>
 2c2:	9f 93       	push	r25
 2c4:	8f 93       	push	r24
 2c6:	df 93       	push	r29
 2c8:	cf 93       	push	r28
 2ca:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("\n");
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <putchar>

			printf("%s","difference: ");
 2d6:	ff 92       	push	r15
 2d8:	ef 92       	push	r14
 2da:	1f 93       	push	r17
 2dc:	0f 93       	push	r16
 2de:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("%u", falltime-risetime);
 2e2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <falltime>
 2e6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <falltime+0x1>
 2ea:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <risetime>
 2ee:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <risetime+0x1>
 2f2:	82 1b       	sub	r24, r18
 2f4:	93 0b       	sbc	r25, r19
 2f6:	9f 93       	push	r25
 2f8:	8f 93       	push	r24
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("\n");
 302:	8a e0       	ldi	r24, 0x0A	; 10
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 68 02 	call	0x4d0	; 0x4d0 <putchar>
			
			captFlag = 0;
 30a:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <captFlag+0x1>
 30e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <captFlag>
 312:	8d b7       	in	r24, 0x3d	; 61
 314:	9e b7       	in	r25, 0x3e	; 62
 316:	48 96       	adiw	r24, 0x18	; 24
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	9e bf       	out	0x3e, r25	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	8d bf       	out	0x3d, r24	; 61
		}
		
		if (ADCFlag == 1000) {
 322:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 326:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
 32a:	88 3e       	cpi	r24, 0xE8	; 232
 32c:	93 40       	sbci	r25, 0x03	; 3
 32e:	09 f0       	breq	.+2      	; 0x332 <main+0x132>
 330:	a3 cf       	rjmp	.-186    	; 0x278 <main+0x78>
			printf("%s","Light Sensor: ");
 332:	9f 92       	push	r9
 334:	8f 92       	push	r8
 336:	1f 93       	push	r17
 338:	0f 93       	push	r16
 33a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("%u",ADC);
 33e:	f3 01       	movw	r30, r6
 340:	80 81       	ld	r24, Z
 342:	91 81       	ldd	r25, Z+1	; 0x01
 344:	9f 93       	push	r25
 346:	8f 93       	push	r24
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <printf>
			printf("\n");
 350:	8a e0       	ldi	r24, 0x0A	; 10
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 68 02 	call	0x4d0	; 0x4d0 <putchar>
			
			ADCFlag = 0;
 358:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__data_end+0x1>
 35c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__data_end>
 360:	8d b7       	in	r24, 0x3d	; 61
 362:	9e b7       	in	r25, 0x3e	; 62
 364:	08 96       	adiw	r24, 0x08	; 8
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	9e bf       	out	0x3e, r25	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	8d bf       	out	0x3d, r24	; 61
 370:	83 cf       	rjmp	.-250    	; 0x278 <main+0x78>

00000372 <__vector_10>:
	could change it in the ADIF interrupt

	*/
}

ISR(TIMER1_CAPT_vect){
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	// ICF1 will be cleared automatically
	if(check(TCCR1B,ICES1)){
 384:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 388:	86 ff       	sbrs	r24, 6
 38a:	0e c0       	rjmp	.+28     	; 0x3a8 <__vector_10+0x36>
		risetime = ICR1;
 38c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 390:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 394:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <risetime+0x1>
 398:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <risetime>
		clear(TCCR1B,ICES1); // input capture ICP1 falling edge
 39c:	e1 e8       	ldi	r30, 0x81	; 129
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	8f 7b       	andi	r24, 0xBF	; 191
 3a4:	80 83       	st	Z, r24
 3a6:	13 c0       	rjmp	.+38     	; 0x3ce <__vector_10+0x5c>
	} else {
		falltime = ICR1;
 3a8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 3ac:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 3b0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <falltime+0x1>
 3b4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <falltime>
		
		captFlag = 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <captFlag+0x1>
 3c0:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <captFlag>
	
		set(TCCR1B,ICES1); // input capture ICP1 rising edge
 3c4:	e1 e8       	ldi	r30, 0x81	; 129
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	80 64       	ori	r24, 0x40	; 64
 3cc:	80 83       	st	Z, r24
	}

}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	9f 91       	pop	r25
 3d4:	8f 91       	pop	r24
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <__vector_21>:

ISR(ADC_vect){
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	2f 93       	push	r18
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
	write an if statement that changes OCR0A depending on ADC value
	could change it in the ADIF interrupt

	*/

	if(ADC < 128){
 3f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3f8:	80 38       	cpi	r24, 0x80	; 128
 3fa:	91 05       	cpc	r25, r1
 3fc:	18 f4       	brcc	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		OCR0A = 125;
 3fe:	8d e7       	ldi	r24, 0x7D	; 125
 400:	87 bd       	out	0x27, r24	; 39
 402:	3f c0       	rjmp	.+126    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	} else if (ADC < 128*2) {
 404:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 408:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 40c:	8f 3f       	cpi	r24, 0xFF	; 255
 40e:	91 05       	cpc	r25, r1
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	18 f4       	brcc	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		OCR0A = 111;
 414:	8f e6       	ldi	r24, 0x6F	; 111
 416:	87 bd       	out	0x27, r24	; 39
 418:	34 c0       	rjmp	.+104    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	} else if (ADC < 128*3) {
 41a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 41e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 422:	80 38       	cpi	r24, 0x80	; 128
 424:	91 40       	sbci	r25, 0x01	; 1
 426:	18 f4       	brcc	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		OCR0A = 99;
 428:	83 e6       	ldi	r24, 0x63	; 99
 42a:	87 bd       	out	0x27, r24	; 39
 42c:	2a c0       	rjmp	.+84     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	} else if (ADC < 128*4) {
 42e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 432:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 436:	81 15       	cp	r24, r1
 438:	92 40       	sbci	r25, 0x02	; 2
 43a:	18 f4       	brcc	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		OCR0A = 94;
 43c:	8e e5       	ldi	r24, 0x5E	; 94
 43e:	87 bd       	out	0x27, r24	; 39
 440:	20 c0       	rjmp	.+64     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	} else if (ADC < 128*5) {
 442:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 446:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 44a:	80 38       	cpi	r24, 0x80	; 128
 44c:	92 40       	sbci	r25, 0x02	; 2
 44e:	18 f4       	brcc	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		OCR0A = 83;
 450:	83 e5       	ldi	r24, 0x53	; 83
 452:	87 bd       	out	0x27, r24	; 39
 454:	16 c0       	rjmp	.+44     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	} else if (ADC < 128*6) {
 456:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 45a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 45e:	81 15       	cp	r24, r1
 460:	93 40       	sbci	r25, 0x03	; 3
 462:	18 f4       	brcc	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		OCR0A = 74;
 464:	8a e4       	ldi	r24, 0x4A	; 74
 466:	87 bd       	out	0x27, r24	; 39
 468:	0c c0       	rjmp	.+24     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	} else if (ADC < 128*7) {
 46a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 46e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 472:	80 38       	cpi	r24, 0x80	; 128
 474:	93 40       	sbci	r25, 0x03	; 3
 476:	18 f4       	brcc	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		OCR0A = 66;
 478:	82 e4       	ldi	r24, 0x42	; 66
 47a:	87 bd       	out	0x27, r24	; 39
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	} else {
		OCR0A = 62;
 47e:	8e e3       	ldi	r24, 0x3E	; 62
 480:	87 bd       	out	0x27, r24	; 39
	}
	
	ADCFlag += 1;
 482:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 486:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__data_end+0x1>
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
 490:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
}
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	2f 91       	pop	r18
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <printf>:
 4a4:	a0 e0       	ldi	r26, 0x00	; 0
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	e8 e5       	ldi	r30, 0x58	; 88
 4aa:	f2 e0       	ldi	r31, 0x02	; 2
 4ac:	0c 94 10 05 	jmp	0xa20	; 0xa20 <__prologue_saves__+0x20>
 4b0:	ae 01       	movw	r20, r28
 4b2:	4b 5f       	subi	r20, 0xFB	; 251
 4b4:	5f 4f       	sbci	r21, 0xFF	; 255
 4b6:	fa 01       	movw	r30, r20
 4b8:	61 91       	ld	r22, Z+
 4ba:	71 91       	ld	r23, Z+
 4bc:	af 01       	movw	r20, r30
 4be:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__iob+0x2>
 4c2:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__iob+0x3>
 4c6:	0e 94 6f 02 	call	0x4de	; 0x4de <vfprintf>
 4ca:	e2 e0       	ldi	r30, 0x02	; 2
 4cc:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__epilogue_restores__+0x20>

000004d0 <putchar>:
 4d0:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <__iob+0x2>
 4d4:	70 91 5f 01 	lds	r23, 0x015F	; 0x80015f <__iob+0x3>
 4d8:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 4dc:	08 95       	ret

000004de <vfprintf>:
 4de:	ab e0       	ldi	r26, 0x0B	; 11
 4e0:	b0 e0       	ldi	r27, 0x00	; 0
 4e2:	e5 e7       	ldi	r30, 0x75	; 117
 4e4:	f2 e0       	ldi	r31, 0x02	; 2
 4e6:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__prologue_saves__>
 4ea:	6c 01       	movw	r12, r24
 4ec:	7b 01       	movw	r14, r22
 4ee:	8a 01       	movw	r16, r20
 4f0:	fc 01       	movw	r30, r24
 4f2:	17 82       	std	Z+7, r1	; 0x07
 4f4:	16 82       	std	Z+6, r1	; 0x06
 4f6:	83 81       	ldd	r24, Z+3	; 0x03
 4f8:	81 ff       	sbrs	r24, 1
 4fa:	cc c1       	rjmp	.+920    	; 0x894 <vfprintf+0x3b6>
 4fc:	ce 01       	movw	r24, r28
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	3c 01       	movw	r6, r24
 502:	f6 01       	movw	r30, r12
 504:	93 81       	ldd	r25, Z+3	; 0x03
 506:	f7 01       	movw	r30, r14
 508:	93 fd       	sbrc	r25, 3
 50a:	85 91       	lpm	r24, Z+
 50c:	93 ff       	sbrs	r25, 3
 50e:	81 91       	ld	r24, Z+
 510:	7f 01       	movw	r14, r30
 512:	88 23       	and	r24, r24
 514:	09 f4       	brne	.+2      	; 0x518 <vfprintf+0x3a>
 516:	ba c1       	rjmp	.+884    	; 0x88c <vfprintf+0x3ae>
 518:	85 32       	cpi	r24, 0x25	; 37
 51a:	39 f4       	brne	.+14     	; 0x52a <vfprintf+0x4c>
 51c:	93 fd       	sbrc	r25, 3
 51e:	85 91       	lpm	r24, Z+
 520:	93 ff       	sbrs	r25, 3
 522:	81 91       	ld	r24, Z+
 524:	7f 01       	movw	r14, r30
 526:	85 32       	cpi	r24, 0x25	; 37
 528:	29 f4       	brne	.+10     	; 0x534 <vfprintf+0x56>
 52a:	b6 01       	movw	r22, r12
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 532:	e7 cf       	rjmp	.-50     	; 0x502 <vfprintf+0x24>
 534:	91 2c       	mov	r9, r1
 536:	21 2c       	mov	r2, r1
 538:	31 2c       	mov	r3, r1
 53a:	ff e1       	ldi	r31, 0x1F	; 31
 53c:	f3 15       	cp	r31, r3
 53e:	d8 f0       	brcs	.+54     	; 0x576 <vfprintf+0x98>
 540:	8b 32       	cpi	r24, 0x2B	; 43
 542:	79 f0       	breq	.+30     	; 0x562 <vfprintf+0x84>
 544:	38 f4       	brcc	.+14     	; 0x554 <vfprintf+0x76>
 546:	80 32       	cpi	r24, 0x20	; 32
 548:	79 f0       	breq	.+30     	; 0x568 <vfprintf+0x8a>
 54a:	83 32       	cpi	r24, 0x23	; 35
 54c:	a1 f4       	brne	.+40     	; 0x576 <vfprintf+0x98>
 54e:	23 2d       	mov	r18, r3
 550:	20 61       	ori	r18, 0x10	; 16
 552:	1d c0       	rjmp	.+58     	; 0x58e <vfprintf+0xb0>
 554:	8d 32       	cpi	r24, 0x2D	; 45
 556:	61 f0       	breq	.+24     	; 0x570 <vfprintf+0x92>
 558:	80 33       	cpi	r24, 0x30	; 48
 55a:	69 f4       	brne	.+26     	; 0x576 <vfprintf+0x98>
 55c:	23 2d       	mov	r18, r3
 55e:	21 60       	ori	r18, 0x01	; 1
 560:	16 c0       	rjmp	.+44     	; 0x58e <vfprintf+0xb0>
 562:	83 2d       	mov	r24, r3
 564:	82 60       	ori	r24, 0x02	; 2
 566:	38 2e       	mov	r3, r24
 568:	e3 2d       	mov	r30, r3
 56a:	e4 60       	ori	r30, 0x04	; 4
 56c:	3e 2e       	mov	r3, r30
 56e:	2a c0       	rjmp	.+84     	; 0x5c4 <vfprintf+0xe6>
 570:	f3 2d       	mov	r31, r3
 572:	f8 60       	ori	r31, 0x08	; 8
 574:	1d c0       	rjmp	.+58     	; 0x5b0 <vfprintf+0xd2>
 576:	37 fc       	sbrc	r3, 7
 578:	2d c0       	rjmp	.+90     	; 0x5d4 <vfprintf+0xf6>
 57a:	20 ed       	ldi	r18, 0xD0	; 208
 57c:	28 0f       	add	r18, r24
 57e:	2a 30       	cpi	r18, 0x0A	; 10
 580:	40 f0       	brcs	.+16     	; 0x592 <vfprintf+0xb4>
 582:	8e 32       	cpi	r24, 0x2E	; 46
 584:	b9 f4       	brne	.+46     	; 0x5b4 <vfprintf+0xd6>
 586:	36 fc       	sbrc	r3, 6
 588:	81 c1       	rjmp	.+770    	; 0x88c <vfprintf+0x3ae>
 58a:	23 2d       	mov	r18, r3
 58c:	20 64       	ori	r18, 0x40	; 64
 58e:	32 2e       	mov	r3, r18
 590:	19 c0       	rjmp	.+50     	; 0x5c4 <vfprintf+0xe6>
 592:	36 fe       	sbrs	r3, 6
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <vfprintf+0xc4>
 596:	8a e0       	ldi	r24, 0x0A	; 10
 598:	98 9e       	mul	r9, r24
 59a:	20 0d       	add	r18, r0
 59c:	11 24       	eor	r1, r1
 59e:	92 2e       	mov	r9, r18
 5a0:	11 c0       	rjmp	.+34     	; 0x5c4 <vfprintf+0xe6>
 5a2:	ea e0       	ldi	r30, 0x0A	; 10
 5a4:	2e 9e       	mul	r2, r30
 5a6:	20 0d       	add	r18, r0
 5a8:	11 24       	eor	r1, r1
 5aa:	22 2e       	mov	r2, r18
 5ac:	f3 2d       	mov	r31, r3
 5ae:	f0 62       	ori	r31, 0x20	; 32
 5b0:	3f 2e       	mov	r3, r31
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <vfprintf+0xe6>
 5b4:	8c 36       	cpi	r24, 0x6C	; 108
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <vfprintf+0xe2>
 5b8:	83 2d       	mov	r24, r3
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	38 2e       	mov	r3, r24
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <vfprintf+0xe6>
 5c0:	88 36       	cpi	r24, 0x68	; 104
 5c2:	41 f4       	brne	.+16     	; 0x5d4 <vfprintf+0xf6>
 5c4:	f7 01       	movw	r30, r14
 5c6:	93 fd       	sbrc	r25, 3
 5c8:	85 91       	lpm	r24, Z+
 5ca:	93 ff       	sbrs	r25, 3
 5cc:	81 91       	ld	r24, Z+
 5ce:	7f 01       	movw	r14, r30
 5d0:	81 11       	cpse	r24, r1
 5d2:	b3 cf       	rjmp	.-154    	; 0x53a <vfprintf+0x5c>
 5d4:	98 2f       	mov	r25, r24
 5d6:	9f 7d       	andi	r25, 0xDF	; 223
 5d8:	95 54       	subi	r25, 0x45	; 69
 5da:	93 30       	cpi	r25, 0x03	; 3
 5dc:	28 f4       	brcc	.+10     	; 0x5e8 <vfprintf+0x10a>
 5de:	0c 5f       	subi	r16, 0xFC	; 252
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	9f e3       	ldi	r25, 0x3F	; 63
 5e4:	99 83       	std	Y+1, r25	; 0x01
 5e6:	0d c0       	rjmp	.+26     	; 0x602 <vfprintf+0x124>
 5e8:	83 36       	cpi	r24, 0x63	; 99
 5ea:	31 f0       	breq	.+12     	; 0x5f8 <vfprintf+0x11a>
 5ec:	83 37       	cpi	r24, 0x73	; 115
 5ee:	71 f0       	breq	.+28     	; 0x60c <vfprintf+0x12e>
 5f0:	83 35       	cpi	r24, 0x53	; 83
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <vfprintf+0x118>
 5f4:	59 c0       	rjmp	.+178    	; 0x6a8 <vfprintf+0x1ca>
 5f6:	21 c0       	rjmp	.+66     	; 0x63a <vfprintf+0x15c>
 5f8:	f8 01       	movw	r30, r16
 5fa:	80 81       	ld	r24, Z
 5fc:	89 83       	std	Y+1, r24	; 0x01
 5fe:	0e 5f       	subi	r16, 0xFE	; 254
 600:	1f 4f       	sbci	r17, 0xFF	; 255
 602:	88 24       	eor	r8, r8
 604:	83 94       	inc	r8
 606:	91 2c       	mov	r9, r1
 608:	53 01       	movw	r10, r6
 60a:	13 c0       	rjmp	.+38     	; 0x632 <vfprintf+0x154>
 60c:	28 01       	movw	r4, r16
 60e:	f2 e0       	ldi	r31, 0x02	; 2
 610:	4f 0e       	add	r4, r31
 612:	51 1c       	adc	r5, r1
 614:	f8 01       	movw	r30, r16
 616:	a0 80       	ld	r10, Z
 618:	b1 80       	ldd	r11, Z+1	; 0x01
 61a:	36 fe       	sbrs	r3, 6
 61c:	03 c0       	rjmp	.+6      	; 0x624 <vfprintf+0x146>
 61e:	69 2d       	mov	r22, r9
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <vfprintf+0x14a>
 624:	6f ef       	ldi	r22, 0xFF	; 255
 626:	7f ef       	ldi	r23, 0xFF	; 255
 628:	c5 01       	movw	r24, r10
 62a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <strnlen>
 62e:	4c 01       	movw	r8, r24
 630:	82 01       	movw	r16, r4
 632:	f3 2d       	mov	r31, r3
 634:	ff 77       	andi	r31, 0x7F	; 127
 636:	3f 2e       	mov	r3, r31
 638:	16 c0       	rjmp	.+44     	; 0x666 <vfprintf+0x188>
 63a:	28 01       	movw	r4, r16
 63c:	22 e0       	ldi	r18, 0x02	; 2
 63e:	42 0e       	add	r4, r18
 640:	51 1c       	adc	r5, r1
 642:	f8 01       	movw	r30, r16
 644:	a0 80       	ld	r10, Z
 646:	b1 80       	ldd	r11, Z+1	; 0x01
 648:	36 fe       	sbrs	r3, 6
 64a:	03 c0       	rjmp	.+6      	; 0x652 <vfprintf+0x174>
 64c:	69 2d       	mov	r22, r9
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <vfprintf+0x178>
 652:	6f ef       	ldi	r22, 0xFF	; 255
 654:	7f ef       	ldi	r23, 0xFF	; 255
 656:	c5 01       	movw	r24, r10
 658:	0e 94 50 04 	call	0x8a0	; 0x8a0 <strnlen_P>
 65c:	4c 01       	movw	r8, r24
 65e:	f3 2d       	mov	r31, r3
 660:	f0 68       	ori	r31, 0x80	; 128
 662:	3f 2e       	mov	r3, r31
 664:	82 01       	movw	r16, r4
 666:	33 fc       	sbrc	r3, 3
 668:	1b c0       	rjmp	.+54     	; 0x6a0 <vfprintf+0x1c2>
 66a:	82 2d       	mov	r24, r2
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	88 16       	cp	r8, r24
 670:	99 06       	cpc	r9, r25
 672:	b0 f4       	brcc	.+44     	; 0x6a0 <vfprintf+0x1c2>
 674:	b6 01       	movw	r22, r12
 676:	80 e2       	ldi	r24, 0x20	; 32
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 67e:	2a 94       	dec	r2
 680:	f4 cf       	rjmp	.-24     	; 0x66a <vfprintf+0x18c>
 682:	f5 01       	movw	r30, r10
 684:	37 fc       	sbrc	r3, 7
 686:	85 91       	lpm	r24, Z+
 688:	37 fe       	sbrs	r3, 7
 68a:	81 91       	ld	r24, Z+
 68c:	5f 01       	movw	r10, r30
 68e:	b6 01       	movw	r22, r12
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 696:	21 10       	cpse	r2, r1
 698:	2a 94       	dec	r2
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	82 1a       	sub	r8, r18
 69e:	91 08       	sbc	r9, r1
 6a0:	81 14       	cp	r8, r1
 6a2:	91 04       	cpc	r9, r1
 6a4:	71 f7       	brne	.-36     	; 0x682 <vfprintf+0x1a4>
 6a6:	e8 c0       	rjmp	.+464    	; 0x878 <vfprintf+0x39a>
 6a8:	84 36       	cpi	r24, 0x64	; 100
 6aa:	11 f0       	breq	.+4      	; 0x6b0 <vfprintf+0x1d2>
 6ac:	89 36       	cpi	r24, 0x69	; 105
 6ae:	41 f5       	brne	.+80     	; 0x700 <vfprintf+0x222>
 6b0:	f8 01       	movw	r30, r16
 6b2:	37 fe       	sbrs	r3, 7
 6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <vfprintf+0x1e6>
 6b6:	60 81       	ld	r22, Z
 6b8:	71 81       	ldd	r23, Z+1	; 0x01
 6ba:	82 81       	ldd	r24, Z+2	; 0x02
 6bc:	93 81       	ldd	r25, Z+3	; 0x03
 6be:	0c 5f       	subi	r16, 0xFC	; 252
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <vfprintf+0x1f6>
 6c4:	60 81       	ld	r22, Z
 6c6:	71 81       	ldd	r23, Z+1	; 0x01
 6c8:	07 2e       	mov	r0, r23
 6ca:	00 0c       	add	r0, r0
 6cc:	88 0b       	sbc	r24, r24
 6ce:	99 0b       	sbc	r25, r25
 6d0:	0e 5f       	subi	r16, 0xFE	; 254
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	f3 2d       	mov	r31, r3
 6d6:	ff 76       	andi	r31, 0x6F	; 111
 6d8:	3f 2e       	mov	r3, r31
 6da:	97 ff       	sbrs	r25, 7
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <vfprintf+0x212>
 6de:	90 95       	com	r25
 6e0:	80 95       	com	r24
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	f0 68       	ori	r31, 0x80	; 128
 6ee:	3f 2e       	mov	r3, r31
 6f0:	2a e0       	ldi	r18, 0x0A	; 10
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	a3 01       	movw	r20, r6
 6f6:	0e 94 a2 04 	call	0x944	; 0x944 <__ultoa_invert>
 6fa:	88 2e       	mov	r8, r24
 6fc:	86 18       	sub	r8, r6
 6fe:	45 c0       	rjmp	.+138    	; 0x78a <vfprintf+0x2ac>
 700:	85 37       	cpi	r24, 0x75	; 117
 702:	31 f4       	brne	.+12     	; 0x710 <vfprintf+0x232>
 704:	23 2d       	mov	r18, r3
 706:	2f 7e       	andi	r18, 0xEF	; 239
 708:	b2 2e       	mov	r11, r18
 70a:	2a e0       	ldi	r18, 0x0A	; 10
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	25 c0       	rjmp	.+74     	; 0x75a <vfprintf+0x27c>
 710:	93 2d       	mov	r25, r3
 712:	99 7f       	andi	r25, 0xF9	; 249
 714:	b9 2e       	mov	r11, r25
 716:	8f 36       	cpi	r24, 0x6F	; 111
 718:	c1 f0       	breq	.+48     	; 0x74a <vfprintf+0x26c>
 71a:	18 f4       	brcc	.+6      	; 0x722 <vfprintf+0x244>
 71c:	88 35       	cpi	r24, 0x58	; 88
 71e:	79 f0       	breq	.+30     	; 0x73e <vfprintf+0x260>
 720:	b5 c0       	rjmp	.+362    	; 0x88c <vfprintf+0x3ae>
 722:	80 37       	cpi	r24, 0x70	; 112
 724:	19 f0       	breq	.+6      	; 0x72c <vfprintf+0x24e>
 726:	88 37       	cpi	r24, 0x78	; 120
 728:	21 f0       	breq	.+8      	; 0x732 <vfprintf+0x254>
 72a:	b0 c0       	rjmp	.+352    	; 0x88c <vfprintf+0x3ae>
 72c:	e9 2f       	mov	r30, r25
 72e:	e0 61       	ori	r30, 0x10	; 16
 730:	be 2e       	mov	r11, r30
 732:	b4 fe       	sbrs	r11, 4
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x272>
 736:	fb 2d       	mov	r31, r11
 738:	f4 60       	ori	r31, 0x04	; 4
 73a:	bf 2e       	mov	r11, r31
 73c:	09 c0       	rjmp	.+18     	; 0x750 <vfprintf+0x272>
 73e:	34 fe       	sbrs	r3, 4
 740:	0a c0       	rjmp	.+20     	; 0x756 <vfprintf+0x278>
 742:	29 2f       	mov	r18, r25
 744:	26 60       	ori	r18, 0x06	; 6
 746:	b2 2e       	mov	r11, r18
 748:	06 c0       	rjmp	.+12     	; 0x756 <vfprintf+0x278>
 74a:	28 e0       	ldi	r18, 0x08	; 8
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	05 c0       	rjmp	.+10     	; 0x75a <vfprintf+0x27c>
 750:	20 e1       	ldi	r18, 0x10	; 16
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <vfprintf+0x27c>
 756:	20 e1       	ldi	r18, 0x10	; 16
 758:	32 e0       	ldi	r19, 0x02	; 2
 75a:	f8 01       	movw	r30, r16
 75c:	b7 fe       	sbrs	r11, 7
 75e:	07 c0       	rjmp	.+14     	; 0x76e <vfprintf+0x290>
 760:	60 81       	ld	r22, Z
 762:	71 81       	ldd	r23, Z+1	; 0x01
 764:	82 81       	ldd	r24, Z+2	; 0x02
 766:	93 81       	ldd	r25, Z+3	; 0x03
 768:	0c 5f       	subi	r16, 0xFC	; 252
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	06 c0       	rjmp	.+12     	; 0x77a <vfprintf+0x29c>
 76e:	60 81       	ld	r22, Z
 770:	71 81       	ldd	r23, Z+1	; 0x01
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	0e 5f       	subi	r16, 0xFE	; 254
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	a3 01       	movw	r20, r6
 77c:	0e 94 a2 04 	call	0x944	; 0x944 <__ultoa_invert>
 780:	88 2e       	mov	r8, r24
 782:	86 18       	sub	r8, r6
 784:	fb 2d       	mov	r31, r11
 786:	ff 77       	andi	r31, 0x7F	; 127
 788:	3f 2e       	mov	r3, r31
 78a:	36 fe       	sbrs	r3, 6
 78c:	0d c0       	rjmp	.+26     	; 0x7a8 <vfprintf+0x2ca>
 78e:	23 2d       	mov	r18, r3
 790:	2e 7f       	andi	r18, 0xFE	; 254
 792:	a2 2e       	mov	r10, r18
 794:	89 14       	cp	r8, r9
 796:	58 f4       	brcc	.+22     	; 0x7ae <vfprintf+0x2d0>
 798:	34 fe       	sbrs	r3, 4
 79a:	0b c0       	rjmp	.+22     	; 0x7b2 <vfprintf+0x2d4>
 79c:	32 fc       	sbrc	r3, 2
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <vfprintf+0x2d4>
 7a0:	83 2d       	mov	r24, r3
 7a2:	8e 7e       	andi	r24, 0xEE	; 238
 7a4:	a8 2e       	mov	r10, r24
 7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <vfprintf+0x2d4>
 7a8:	b8 2c       	mov	r11, r8
 7aa:	a3 2c       	mov	r10, r3
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <vfprintf+0x2d6>
 7ae:	b8 2c       	mov	r11, r8
 7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <vfprintf+0x2d6>
 7b2:	b9 2c       	mov	r11, r9
 7b4:	a4 fe       	sbrs	r10, 4
 7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <vfprintf+0x2f8>
 7b8:	fe 01       	movw	r30, r28
 7ba:	e8 0d       	add	r30, r8
 7bc:	f1 1d       	adc	r31, r1
 7be:	80 81       	ld	r24, Z
 7c0:	80 33       	cpi	r24, 0x30	; 48
 7c2:	21 f4       	brne	.+8      	; 0x7cc <vfprintf+0x2ee>
 7c4:	9a 2d       	mov	r25, r10
 7c6:	99 7e       	andi	r25, 0xE9	; 233
 7c8:	a9 2e       	mov	r10, r25
 7ca:	09 c0       	rjmp	.+18     	; 0x7de <vfprintf+0x300>
 7cc:	a2 fe       	sbrs	r10, 2
 7ce:	06 c0       	rjmp	.+12     	; 0x7dc <vfprintf+0x2fe>
 7d0:	b3 94       	inc	r11
 7d2:	b3 94       	inc	r11
 7d4:	04 c0       	rjmp	.+8      	; 0x7de <vfprintf+0x300>
 7d6:	8a 2d       	mov	r24, r10
 7d8:	86 78       	andi	r24, 0x86	; 134
 7da:	09 f0       	breq	.+2      	; 0x7de <vfprintf+0x300>
 7dc:	b3 94       	inc	r11
 7de:	a3 fc       	sbrc	r10, 3
 7e0:	11 c0       	rjmp	.+34     	; 0x804 <vfprintf+0x326>
 7e2:	a0 fe       	sbrs	r10, 0
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <vfprintf+0x314>
 7e6:	b2 14       	cp	r11, r2
 7e8:	88 f4       	brcc	.+34     	; 0x80c <vfprintf+0x32e>
 7ea:	28 0c       	add	r2, r8
 7ec:	92 2c       	mov	r9, r2
 7ee:	9b 18       	sub	r9, r11
 7f0:	0e c0       	rjmp	.+28     	; 0x80e <vfprintf+0x330>
 7f2:	b2 14       	cp	r11, r2
 7f4:	60 f4       	brcc	.+24     	; 0x80e <vfprintf+0x330>
 7f6:	b6 01       	movw	r22, r12
 7f8:	80 e2       	ldi	r24, 0x20	; 32
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 800:	b3 94       	inc	r11
 802:	f7 cf       	rjmp	.-18     	; 0x7f2 <vfprintf+0x314>
 804:	b2 14       	cp	r11, r2
 806:	18 f4       	brcc	.+6      	; 0x80e <vfprintf+0x330>
 808:	2b 18       	sub	r2, r11
 80a:	02 c0       	rjmp	.+4      	; 0x810 <vfprintf+0x332>
 80c:	98 2c       	mov	r9, r8
 80e:	21 2c       	mov	r2, r1
 810:	a4 fe       	sbrs	r10, 4
 812:	10 c0       	rjmp	.+32     	; 0x834 <vfprintf+0x356>
 814:	b6 01       	movw	r22, r12
 816:	80 e3       	ldi	r24, 0x30	; 48
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 81e:	a2 fe       	sbrs	r10, 2
 820:	17 c0       	rjmp	.+46     	; 0x850 <vfprintf+0x372>
 822:	a1 fc       	sbrc	r10, 1
 824:	03 c0       	rjmp	.+6      	; 0x82c <vfprintf+0x34e>
 826:	88 e7       	ldi	r24, 0x78	; 120
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <vfprintf+0x352>
 82c:	88 e5       	ldi	r24, 0x58	; 88
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	b6 01       	movw	r22, r12
 832:	0c c0       	rjmp	.+24     	; 0x84c <vfprintf+0x36e>
 834:	8a 2d       	mov	r24, r10
 836:	86 78       	andi	r24, 0x86	; 134
 838:	59 f0       	breq	.+22     	; 0x850 <vfprintf+0x372>
 83a:	a1 fe       	sbrs	r10, 1
 83c:	02 c0       	rjmp	.+4      	; 0x842 <vfprintf+0x364>
 83e:	8b e2       	ldi	r24, 0x2B	; 43
 840:	01 c0       	rjmp	.+2      	; 0x844 <vfprintf+0x366>
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	a7 fc       	sbrc	r10, 7
 846:	8d e2       	ldi	r24, 0x2D	; 45
 848:	b6 01       	movw	r22, r12
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 850:	89 14       	cp	r8, r9
 852:	38 f4       	brcc	.+14     	; 0x862 <vfprintf+0x384>
 854:	b6 01       	movw	r22, r12
 856:	80 e3       	ldi	r24, 0x30	; 48
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 85e:	9a 94       	dec	r9
 860:	f7 cf       	rjmp	.-18     	; 0x850 <vfprintf+0x372>
 862:	8a 94       	dec	r8
 864:	f3 01       	movw	r30, r6
 866:	e8 0d       	add	r30, r8
 868:	f1 1d       	adc	r31, r1
 86a:	80 81       	ld	r24, Z
 86c:	b6 01       	movw	r22, r12
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 874:	81 10       	cpse	r8, r1
 876:	f5 cf       	rjmp	.-22     	; 0x862 <vfprintf+0x384>
 878:	22 20       	and	r2, r2
 87a:	09 f4       	brne	.+2      	; 0x87e <vfprintf+0x3a0>
 87c:	42 ce       	rjmp	.-892    	; 0x502 <vfprintf+0x24>
 87e:	b6 01       	movw	r22, r12
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 66 04 	call	0x8cc	; 0x8cc <fputc>
 888:	2a 94       	dec	r2
 88a:	f6 cf       	rjmp	.-20     	; 0x878 <vfprintf+0x39a>
 88c:	f6 01       	movw	r30, r12
 88e:	86 81       	ldd	r24, Z+6	; 0x06
 890:	97 81       	ldd	r25, Z+7	; 0x07
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x3ba>
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	9f ef       	ldi	r25, 0xFF	; 255
 898:	2b 96       	adiw	r28, 0x0b	; 11
 89a:	e2 e1       	ldi	r30, 0x12	; 18
 89c:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__epilogue_restores__>

000008a0 <strnlen_P>:
 8a0:	fc 01       	movw	r30, r24
 8a2:	05 90       	lpm	r0, Z+
 8a4:	61 50       	subi	r22, 0x01	; 1
 8a6:	70 40       	sbci	r23, 0x00	; 0
 8a8:	01 10       	cpse	r0, r1
 8aa:	d8 f7       	brcc	.-10     	; 0x8a2 <strnlen_P+0x2>
 8ac:	80 95       	com	r24
 8ae:	90 95       	com	r25
 8b0:	8e 0f       	add	r24, r30
 8b2:	9f 1f       	adc	r25, r31
 8b4:	08 95       	ret

000008b6 <strnlen>:
 8b6:	fc 01       	movw	r30, r24
 8b8:	61 50       	subi	r22, 0x01	; 1
 8ba:	70 40       	sbci	r23, 0x00	; 0
 8bc:	01 90       	ld	r0, Z+
 8be:	01 10       	cpse	r0, r1
 8c0:	d8 f7       	brcc	.-10     	; 0x8b8 <strnlen+0x2>
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	8e 0f       	add	r24, r30
 8c8:	9f 1f       	adc	r25, r31
 8ca:	08 95       	ret

000008cc <fputc>:
 8cc:	0f 93       	push	r16
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	fb 01       	movw	r30, r22
 8d6:	23 81       	ldd	r18, Z+3	; 0x03
 8d8:	21 fd       	sbrc	r18, 1
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <fputc+0x16>
 8dc:	8f ef       	ldi	r24, 0xFF	; 255
 8de:	9f ef       	ldi	r25, 0xFF	; 255
 8e0:	2c c0       	rjmp	.+88     	; 0x93a <__stack+0x3b>
 8e2:	22 ff       	sbrs	r18, 2
 8e4:	16 c0       	rjmp	.+44     	; 0x912 <__stack+0x13>
 8e6:	46 81       	ldd	r20, Z+6	; 0x06
 8e8:	57 81       	ldd	r21, Z+7	; 0x07
 8ea:	24 81       	ldd	r18, Z+4	; 0x04
 8ec:	35 81       	ldd	r19, Z+5	; 0x05
 8ee:	42 17       	cp	r20, r18
 8f0:	53 07       	cpc	r21, r19
 8f2:	44 f4       	brge	.+16     	; 0x904 <__stack+0x5>
 8f4:	a0 81       	ld	r26, Z
 8f6:	b1 81       	ldd	r27, Z+1	; 0x01
 8f8:	9d 01       	movw	r18, r26
 8fa:	2f 5f       	subi	r18, 0xFF	; 255
 8fc:	3f 4f       	sbci	r19, 0xFF	; 255
 8fe:	31 83       	std	Z+1, r19	; 0x01
 900:	20 83       	st	Z, r18
 902:	8c 93       	st	X, r24
 904:	26 81       	ldd	r18, Z+6	; 0x06
 906:	37 81       	ldd	r19, Z+7	; 0x07
 908:	2f 5f       	subi	r18, 0xFF	; 255
 90a:	3f 4f       	sbci	r19, 0xFF	; 255
 90c:	37 83       	std	Z+7, r19	; 0x07
 90e:	26 83       	std	Z+6, r18	; 0x06
 910:	14 c0       	rjmp	.+40     	; 0x93a <__stack+0x3b>
 912:	8b 01       	movw	r16, r22
 914:	ec 01       	movw	r28, r24
 916:	fb 01       	movw	r30, r22
 918:	00 84       	ldd	r0, Z+8	; 0x08
 91a:	f1 85       	ldd	r31, Z+9	; 0x09
 91c:	e0 2d       	mov	r30, r0
 91e:	09 95       	icall
 920:	89 2b       	or	r24, r25
 922:	e1 f6       	brne	.-72     	; 0x8dc <fputc+0x10>
 924:	d8 01       	movw	r26, r16
 926:	16 96       	adiw	r26, 0x06	; 6
 928:	8d 91       	ld	r24, X+
 92a:	9c 91       	ld	r25, X
 92c:	17 97       	sbiw	r26, 0x07	; 7
 92e:	01 96       	adiw	r24, 0x01	; 1
 930:	17 96       	adiw	r26, 0x07	; 7
 932:	9c 93       	st	X, r25
 934:	8e 93       	st	-X, r24
 936:	16 97       	sbiw	r26, 0x06	; 6
 938:	ce 01       	movw	r24, r28
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	08 95       	ret

00000944 <__ultoa_invert>:
 944:	fa 01       	movw	r30, r20
 946:	aa 27       	eor	r26, r26
 948:	28 30       	cpi	r18, 0x08	; 8
 94a:	51 f1       	breq	.+84     	; 0x9a0 <__ultoa_invert+0x5c>
 94c:	20 31       	cpi	r18, 0x10	; 16
 94e:	81 f1       	breq	.+96     	; 0x9b0 <__ultoa_invert+0x6c>
 950:	e8 94       	clt
 952:	6f 93       	push	r22
 954:	6e 7f       	andi	r22, 0xFE	; 254
 956:	6e 5f       	subi	r22, 0xFE	; 254
 958:	7f 4f       	sbci	r23, 0xFF	; 255
 95a:	8f 4f       	sbci	r24, 0xFF	; 255
 95c:	9f 4f       	sbci	r25, 0xFF	; 255
 95e:	af 4f       	sbci	r26, 0xFF	; 255
 960:	b1 e0       	ldi	r27, 0x01	; 1
 962:	3e d0       	rcall	.+124    	; 0x9e0 <__ultoa_invert+0x9c>
 964:	b4 e0       	ldi	r27, 0x04	; 4
 966:	3c d0       	rcall	.+120    	; 0x9e0 <__ultoa_invert+0x9c>
 968:	67 0f       	add	r22, r23
 96a:	78 1f       	adc	r23, r24
 96c:	89 1f       	adc	r24, r25
 96e:	9a 1f       	adc	r25, r26
 970:	a1 1d       	adc	r26, r1
 972:	68 0f       	add	r22, r24
 974:	79 1f       	adc	r23, r25
 976:	8a 1f       	adc	r24, r26
 978:	91 1d       	adc	r25, r1
 97a:	a1 1d       	adc	r26, r1
 97c:	6a 0f       	add	r22, r26
 97e:	71 1d       	adc	r23, r1
 980:	81 1d       	adc	r24, r1
 982:	91 1d       	adc	r25, r1
 984:	a1 1d       	adc	r26, r1
 986:	20 d0       	rcall	.+64     	; 0x9c8 <__ultoa_invert+0x84>
 988:	09 f4       	brne	.+2      	; 0x98c <__ultoa_invert+0x48>
 98a:	68 94       	set
 98c:	3f 91       	pop	r19
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	26 9f       	mul	r18, r22
 992:	11 24       	eor	r1, r1
 994:	30 19       	sub	r19, r0
 996:	30 5d       	subi	r19, 0xD0	; 208
 998:	31 93       	st	Z+, r19
 99a:	de f6       	brtc	.-74     	; 0x952 <__ultoa_invert+0xe>
 99c:	cf 01       	movw	r24, r30
 99e:	08 95       	ret
 9a0:	46 2f       	mov	r20, r22
 9a2:	47 70       	andi	r20, 0x07	; 7
 9a4:	40 5d       	subi	r20, 0xD0	; 208
 9a6:	41 93       	st	Z+, r20
 9a8:	b3 e0       	ldi	r27, 0x03	; 3
 9aa:	0f d0       	rcall	.+30     	; 0x9ca <__ultoa_invert+0x86>
 9ac:	c9 f7       	brne	.-14     	; 0x9a0 <__ultoa_invert+0x5c>
 9ae:	f6 cf       	rjmp	.-20     	; 0x99c <__ultoa_invert+0x58>
 9b0:	46 2f       	mov	r20, r22
 9b2:	4f 70       	andi	r20, 0x0F	; 15
 9b4:	40 5d       	subi	r20, 0xD0	; 208
 9b6:	4a 33       	cpi	r20, 0x3A	; 58
 9b8:	18 f0       	brcs	.+6      	; 0x9c0 <__ultoa_invert+0x7c>
 9ba:	49 5d       	subi	r20, 0xD9	; 217
 9bc:	31 fd       	sbrc	r19, 1
 9be:	40 52       	subi	r20, 0x20	; 32
 9c0:	41 93       	st	Z+, r20
 9c2:	02 d0       	rcall	.+4      	; 0x9c8 <__ultoa_invert+0x84>
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__ultoa_invert+0x6c>
 9c6:	ea cf       	rjmp	.-44     	; 0x99c <__ultoa_invert+0x58>
 9c8:	b4 e0       	ldi	r27, 0x04	; 4
 9ca:	a6 95       	lsr	r26
 9cc:	97 95       	ror	r25
 9ce:	87 95       	ror	r24
 9d0:	77 95       	ror	r23
 9d2:	67 95       	ror	r22
 9d4:	ba 95       	dec	r27
 9d6:	c9 f7       	brne	.-14     	; 0x9ca <__ultoa_invert+0x86>
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	61 05       	cpc	r22, r1
 9dc:	71 05       	cpc	r23, r1
 9de:	08 95       	ret
 9e0:	9b 01       	movw	r18, r22
 9e2:	ac 01       	movw	r20, r24
 9e4:	0a 2e       	mov	r0, r26
 9e6:	06 94       	lsr	r0
 9e8:	57 95       	ror	r21
 9ea:	47 95       	ror	r20
 9ec:	37 95       	ror	r19
 9ee:	27 95       	ror	r18
 9f0:	ba 95       	dec	r27
 9f2:	c9 f7       	brne	.-14     	; 0x9e6 <__ultoa_invert+0xa2>
 9f4:	62 0f       	add	r22, r18
 9f6:	73 1f       	adc	r23, r19
 9f8:	84 1f       	adc	r24, r20
 9fa:	95 1f       	adc	r25, r21
 9fc:	a0 1d       	adc	r26, r0
 9fe:	08 95       	ret

00000a00 <__prologue_saves__>:
 a00:	2f 92       	push	r2
 a02:	3f 92       	push	r3
 a04:	4f 92       	push	r4
 a06:	5f 92       	push	r5
 a08:	6f 92       	push	r6
 a0a:	7f 92       	push	r7
 a0c:	8f 92       	push	r8
 a0e:	9f 92       	push	r9
 a10:	af 92       	push	r10
 a12:	bf 92       	push	r11
 a14:	cf 92       	push	r12
 a16:	df 92       	push	r13
 a18:	ef 92       	push	r14
 a1a:	ff 92       	push	r15
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	cd b7       	in	r28, 0x3d	; 61
 a26:	de b7       	in	r29, 0x3e	; 62
 a28:	ca 1b       	sub	r28, r26
 a2a:	db 0b       	sbc	r29, r27
 a2c:	0f b6       	in	r0, 0x3f	; 63
 a2e:	f8 94       	cli
 a30:	de bf       	out	0x3e, r29	; 62
 a32:	0f be       	out	0x3f, r0	; 63
 a34:	cd bf       	out	0x3d, r28	; 61
 a36:	09 94       	ijmp

00000a38 <__epilogue_restores__>:
 a38:	2a 88       	ldd	r2, Y+18	; 0x12
 a3a:	39 88       	ldd	r3, Y+17	; 0x11
 a3c:	48 88       	ldd	r4, Y+16	; 0x10
 a3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 a40:	6e 84       	ldd	r6, Y+14	; 0x0e
 a42:	7d 84       	ldd	r7, Y+13	; 0x0d
 a44:	8c 84       	ldd	r8, Y+12	; 0x0c
 a46:	9b 84       	ldd	r9, Y+11	; 0x0b
 a48:	aa 84       	ldd	r10, Y+10	; 0x0a
 a4a:	b9 84       	ldd	r11, Y+9	; 0x09
 a4c:	c8 84       	ldd	r12, Y+8	; 0x08
 a4e:	df 80       	ldd	r13, Y+7	; 0x07
 a50:	ee 80       	ldd	r14, Y+6	; 0x06
 a52:	fd 80       	ldd	r15, Y+5	; 0x05
 a54:	0c 81       	ldd	r16, Y+4	; 0x04
 a56:	1b 81       	ldd	r17, Y+3	; 0x03
 a58:	aa 81       	ldd	r26, Y+2	; 0x02
 a5a:	b9 81       	ldd	r27, Y+1	; 0x01
 a5c:	ce 0f       	add	r28, r30
 a5e:	d1 1d       	adc	r29, r1
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	f8 94       	cli
 a64:	de bf       	out	0x3e, r29	; 62
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	ed 01       	movw	r28, r26
 a6c:	08 95       	ret

00000a6e <_exit>:
 a6e:	f8 94       	cli

00000a70 <__stop_program>:
 a70:	ff cf       	rjmp	.-2      	; 0xa70 <__stop_program>
